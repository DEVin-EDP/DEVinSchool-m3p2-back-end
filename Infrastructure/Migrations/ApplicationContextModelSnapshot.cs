// <auto-generated />
using System;
using Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.CourseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("int");

                    b.Property<string>("CategoriaCurso")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("CursoAtivo")
                        .HasColumnType("bit");

                    b.Property<string>("Informacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resumo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Curso");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CargaHoraria = 60,
                            CategoriaCurso = "TECNOLOGIA",
                            CursoAtivo = true,
                            Informacao = "Curso de Java para iniciantes",
                            Link = "java.com",
                            Nome = "Curso de Java",
                            Resumo = "Introdução ao Java"
                        },
                        new
                        {
                            Id = 2,
                            CargaHoraria = 12546,
                            CategoriaCurso = "ADMINISTRACAO",
                            CursoAtivo = true,
                            Informacao = "Administração de Empresas para iniciantes",
                            Link = "admdeempresas.com",
                            Nome = "Adm de Empresas",
                            Resumo = "Introdução a Administração de Empresas"
                        },
                        new
                        {
                            Id = 3,
                            CargaHoraria = 120,
                            CategoriaCurso = "MARKETING",
                            CursoAtivo = true,
                            Informacao = "Introdução a marketing utilizando redes sociais",
                            Link = "marketingrs.com",
                            Nome = "Marketing de Redes Sociais",
                            Resumo = "aprenda utilizar redes sociais para alavancar o seu negócio"
                        },
                        new
                        {
                            Id = 4,
                            CargaHoraria = 60,
                            CategoriaCurso = "DESING",
                            CursoAtivo = true,
                            Informacao = "Técnicas de Designer gráfico.",
                            Link = "designergrafico.com",
                            Nome = "Introdução ao Design Gráfico",
                            Resumo = "Aprenda técnicas essenciais para ser um Designer gráfico."
                        });
                });

            modelBuilder.Entity("Domain.Models.CursoFavoritadoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CursoFavoritado");
                });

            modelBuilder.Entity("Domain.Models.CursoSalvoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("StatusCurso")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CursoSalvo");
                });

            modelBuilder.Entity("Domain.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("foto");

                    b.Property<int>("Idade")
                        .HasColumnType("int")
                        .HasColumnName("idade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("senha");

                    b.Property<bool>("UsuarioAtivo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CPF = "11122233308",
                            DataCadastro = new DateTime(2023, 4, 10, 22, 37, 3, 118, DateTimeKind.Local).AddTicks(5505),
                            Email = "teste@gmail.com",
                            Foto = "https://i.pinimg.com/236x/37/01/e7/3701e763f6ded4234b68d8fac1a9fa85.jpg",
                            Idade = 30,
                            Nome = "teste",
                            Senha = "teste123",
                            UsuarioAtivo = true
                        },
                        new
                        {
                            Id = 2,
                            CPF = "11122233308",
                            DataCadastro = new DateTime(2023, 4, 10, 22, 37, 3, 118, DateTimeKind.Local).AddTicks(6021),
                            Email = "tiago@gmail.com",
                            Foto = "https://i.pinimg.com/236x/05/0b/72/050b721378546e519bd6e33c4ccf9630.jpg",
                            Idade = 22,
                            Nome = "Tiago",
                            Senha = "tester12345678",
                            UsuarioAtivo = true
                        },
                        new
                        {
                            Id = 3,
                            CPF = "11122233308",
                            DataCadastro = new DateTime(2023, 4, 10, 22, 37, 3, 118, DateTimeKind.Local).AddTicks(6023),
                            Email = "josé@gmail.com",
                            Foto = "https://pbs.twimg.com/profile_images/1268204267749494788/az__pHAX_400x400.jpg",
                            Idade = 55,
                            Nome = "José",
                            Senha = "tester12345678",
                            UsuarioAtivo = true
                        },
                        new
                        {
                            Id = 5,
                            CPF = "12345278412",
                            DataCadastro = new DateTime(2023, 4, 10, 22, 37, 3, 118, DateTimeKind.Local).AddTicks(6025),
                            Email = "ana@mail.com",
                            Foto = "https://example.com/myphoto.jpg",
                            Idade = 32,
                            Nome = "Ana Martha",
                            Senha = "ana12345",
                            UsuarioAtivo = true
                        },
                        new
                        {
                            Id = 6,
                            CPF = "78945612345",
                            DataCadastro = new DateTime(2023, 4, 10, 22, 37, 3, 118, DateTimeKind.Local).AddTicks(6027),
                            Email = "callas@mail.com",
                            Foto = "https://example.com/myphoto.jpg",
                            Idade = 30,
                            Nome = "Maria Callas",
                            Senha = "123asdfg",
                            UsuarioAtivo = true
                        },
                        new
                        {
                            Id = 7,
                            CPF = "23456242189",
                            DataCadastro = new DateTime(2023, 4, 10, 22, 37, 3, 118, DateTimeKind.Local).AddTicks(6032),
                            Email = "rita@mail.com\"",
                            Foto = "https://example.com/myphoto.jpg",
                            Idade = 82,
                            Nome = "Rita Lee",
                            Senha = "123asdfgh",
                            UsuarioAtivo = true
                        });
                });

            modelBuilder.Entity("Domain.Models.CursoFavoritadoModel", b =>
                {
                    b.HasOne("Domain.Models.CourseModel", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserModel", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Models.CursoSalvoModel", b =>
                {
                    b.HasOne("Domain.Models.CourseModel", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserModel", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
